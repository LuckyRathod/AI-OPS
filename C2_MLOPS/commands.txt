Setting the Project 
gcloud config set project srivastsan-project 

Create a container - This will store in container registry
gcloud builds submit --tag gcr.io/lucky-project/complaintsapi .

Show last 3 containers and also apply filter 
gcloud builds list --filter complaints --limit 3 

Container Details
gcloud builds describe container_id

Container Logs Details
gcloud build logs container_id

Creating Kubernetes Cluster 
gcloud container clusters create complaints-gke --zone "us-west1-b" --machine-type "n1-standard-1"
--num-nodes "1" --service-account luckyrathod-gke@luckyproject.iam.gserviceaccount.com

Deploying Deployment.yaml in Cluster 
kubectl apply -f deployment.yaml

Get all deployments 
kubectl get deployments 

Get all pods
kubectl get pods

Describe pod
kubectl describe pod pod_id

Get pod logs 
kubectl logs pod pod_id

Deploying service.yaml in cluster
kubectl apply -f service.yaml

Get all services
kubectl get services

Increase Kubernetes Cluster Size 
gcloud container clusters resize complaints-gke -num-nodes 3 --zone us-west1-b

List all the clusters container list 
gcloud container clusters list 

Scale PODS - Deployment - Replicas
kubectl scale deployment complaints --replicas 2 

Horizontal Pod Autoscaller 
kubectl autoscale deployment complaints --max 6 --min 2 --cpu-percent 50

Deploying Continer on Google Cloud Run 
gcloud run deploy container_name --image gcr.io/luckyproject/flask-gke --platform managed --memory 1G

Deploying Flask Application on App Engine [Go wherever your app.yaml files is]
gcloud app create
gcloud app deploy

Deploy Application on GKE Autopilot
- Create a AutoPilot GKE Cluster 
- You will get Cluster connect link 
- Come to gcloud shell paste that link 
- Create the container as you have created earlier 
- Deploy Deployment.yaml and Service.yaml


CI-CD Automated Pipeline
- Clone repo in Google cloud shell
- Follow the Process of Creating Cluster 
- Create Docker,Deployment,Service yaml files
- Create Cloud Build [Similar to Jenkins]
- Run Cloud Build YAML File 
gcloud builds submit --config cloudbuild.yaml

To Integrate Github with GCP . And do Automated CI-CD 
- Setup an Google cloud build in Github for that repo
- Create a Trigger "Push to Main" in GCP Build 





